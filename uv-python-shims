#!/bin/bash

<<comment
  ============================================================
    Last Edit:    11/21/2024
    Created by:   instance.id (https://github.com/instance.id)
    Platform:     Linux
    Filename:     uv-python-shims
  ============================================================
  .DESCRIPTION
    Creates shims in $HOME/.local/bin for Python versions installed with uv,
    and updates them to reflect the current state of uv installations.

    The goal of this script is to emulate the functionality
    of pyenv (at least, as best possible) using uv

  .EXAMPLE
    uv-python-shims
    uv-python-shims 3.11

  .NOTES
    Inspired by: https://bluesock.org/~willkg/blog/dev/switch_pyenv_to_uv.html
comment

LOCALBIN="${HOME}/.local/bin"
UVDIR="$(uv python dir)"
MANAGED_SHIMS=$(mktemp)

# --| Ensure Python User Base ---------------
function ensure_python_userbase() {
  local uv_version_dir="$1"
  local version_name=$(basename "${uv_version_dir}")
  local user_base="${HOME}/.local/python/${version_name}"

  if [[ ! -d "${user_base}" ]]; then
    mkdir -p "${user_base}"
  fi
}

# --| Create Shim --------------------------
function create_shim() {
  local shim_path="$1"
  local python_path="$2"
  local uv_version_dir="$3"

  local python_version=$(basename "${uv_version_dir}" | sed -n 's/.*python-\([0-9]\+\.[0-9]\+\).*/\1/p')
  local python_lib_path="${uv_version_dir}/lib/python${python_version}"

  ensure_python_userbase "${uv_version_dir}"

  cat <<EOF >"${shim_path}"
#!/bin/bash
# Shim generated by uv-python-shims
export PYTHONHOME="${uv_version_dir}"
export PYTHONUSERBASE="${HOME}/.local/python/\$(basename "${uv_version_dir}")"
export PIP_USER=1
unset EXTERNALLY_MANAGED
exec "${python_path}" "\$@"
EOF
  chmod +x "${shim_path}"
  echo "${shim_path}" >>"${MANAGED_SHIMS}"
}

# --| Create Pip Shim ----------------------
function create_pip_shim() {
  local shim_path="$1"
  local pip_path="$2"
  local uv_version_dir="$3"

  local python_version=$(basename "${uv_version_dir}" | sed -n 's/.*python-\([0-9]\+\.[0-9]\+\).*/\1/p')
  local user_site="${HOME}/.local/python/$(basename "${uv_version_dir}")"

  # Ensure user base directory exists
  ensure_python_userbase "${uv_version_dir}"

  cat <<EOF >"${shim_path}"
#!/bin/bash
# -*- coding: utf-8 -*-

# Shim generated by uv-python-shims
export PYTHONUSERBASE="${user_site}"
export PIP_USER=1
export PYTHONPATH="${user_site}/lib/python${python_version}/site-packages"
unset EXTERNALLY_MANAGED
exec "${pip_path}" "\$@"
EOF
  chmod +x "${shim_path}"
  echo "${shim_path}" >>"${MANAGED_SHIMS}"
}

# --| Create Config Shim -------------------
# Create matching config shim if config exists for the Python version
function create_config_shim() {
  local config_path="$1"
  local config_shim="$2"
  local uv_version_dir="$3"

  if [[ -f "${config_path}" ]]; then
    create_shim "${config_shim}" "${config_path}" "${uv_version_dir}"
  fi
}

# --| Create Default Shims -----------------
# Create generic python/python3 shims for the desired version
function create_default_shims() {
  local python_path="$1"
  local uv_version_dir="$2"

  cat <<'EOF' >"${LOCALBIN}/python3"
#!/bin/bash
# -*- coding: utf-8 -*-

# Shim generated by uv-python-shims
UV_ROOT="$(uv python dir)"
UVENV_ROOT="${UVENV_ROOT:-${XDG_DATA_HOME:-$HOME/.local/share}/uvenv}"
ACTIVE_VERSION=$("${UVENV_ROOT}/uv-python-version")
PYTHON_PATH="${UV_ROOT}/cpython-${ACTIVE_VERSION}*/bin/python${ACTIVE_VERSION}"
exec ${PYTHON_PATH} "$@"
EOF

  chmod +x "${LOCALBIN}/python3"
  ln -sf "${LOCALBIN}/python3" "${LOCALBIN}/python"
  echo "${LOCALBIN}/python3" >>"${MANAGED_SHIMS}"
  echo "${LOCALBIN}/python" >>"${MANAGED_SHIMS}"
}

# --| Cleanup ------------------------------
# Remove shims for uv Pythons that are no longer installed
function cleanup_old_shims() {
  for shim in "${LOCALBIN}"/python*; do
    if [[ -f "${shim}" ]]; then
      if grep -q '# Shim generated by uv-python-shims' "${shim}"; then

        # Check if this shim is still managed
        if ! grep -qx "${shim}" "${MANAGED_SHIMS}"; then
          echo "Removing obsolete shim: ${shim}"
          rm -f "${shim}"
        fi
      fi
    fi
  done
}

# --| Find Python Versions -----------------
function find_python_versions() {
  local desired_version="$1"
  local desired_python_path=""

  for python_path in "${UVDIR}"/*/bin/python*; do
    if [[ ! -f "${python_path}" ]] || [[ "${python_path}" =~ .*config$ ]]; then
      continue
    fi

    local version_name=$(basename "${python_path}")
    local uv_version_dir=$(dirname "$(dirname "${python_path}")")
    local shim_path="${LOCALBIN}/${version_name}"
    local config_path="${python_path}-config"
    local config_shim="${LOCALBIN}/${version_name}-config"

    # pip shim handling
    local pip_path="${uv_version_dir}/bin/pip"
    local pip_version_name="pip${version_name#python}"
    local pip_shim="${LOCALBIN}/${pip_version_name}"

    # Version check
    if [[ -n "${desired_version}" && "${python_path}" =~ python${desired_version}$ ]]; then
      desired_python_path="${python_path}"
    fi

    create_shim "${shim_path}" "${python_path}" "${uv_version_dir}"
    create_config_shim "${config_path}" "${config_shim}" "${uv_version_dir}"

    # Create pip shim if pip exists
    if [[ -f "${pip_path}" ]]; then
      create_pip_shim "${pip_shim}" "${pip_path}" "${uv_version_dir}"
    fi
  done

  # Create default shims if desired version found
  if [[ -n "${desired_python_path}" ]]; then
    local uv_version_dir=$(dirname "$(dirname "${desired_python_path}")")
    create_default_shims "${desired_python_path}" "${uv_version_dir}"
  fi
}

# --| Main ---------------------------------
# --|---------------------------------------
function main() {
  mkdir -p "${LOCALBIN}"
  find_python_versions "$1"
  cleanup_old_shims

  # Remove the temporary file
  rm -f "${MANAGED_SHIMS}"
}

main "$@"
